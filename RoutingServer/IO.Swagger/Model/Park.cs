/* 
 * JcDecaux
 *
 * JcDecaux API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Park
    /// </summary>
    [DataContract]
        public partial class Park :  IEquatable<Park>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Park" /> class.
        /// </summary>
        /// <param name="contractName">contractName.</param>
        /// <param name="name">name.</param>
        /// <param name="number">number.</param>
        /// <param name="status">status.</param>
        /// <param name="position">position.</param>
        /// <param name="accessType">accessType.</param>
        /// <param name="lockerType">lockerType.</param>
        /// <param name="hasSurveillance">hasSurveillance.</param>
        /// <param name="isFree">isFree.</param>
        /// <param name="address">address.</param>
        /// <param name="zipCode">zipCode.</param>
        /// <param name="city">city.</param>
        /// <param name="isOffStreet">isOffStreet.</param>
        /// <param name="hasElectricSupport">hasElectricSupport.</param>
        /// <param name="hasPhysicalReception">hasPhysicalReception.</param>
        public Park(string contractName = default(string), string name = default(string), int? number = default(int?), string status = default(string), ParkPosition position = default(ParkPosition), string accessType = default(string), string lockerType = default(string), bool? hasSurveillance = default(bool?), bool? isFree = default(bool?), string address = default(string), string zipCode = default(string), string city = default(string), bool? isOffStreet = default(bool?), bool? hasElectricSupport = default(bool?), bool? hasPhysicalReception = default(bool?))
        {
            this.ContractName = contractName;
            this.Name = name;
            this.Number = number;
            this.Status = status;
            this.Position = position;
            this.AccessType = accessType;
            this.LockerType = lockerType;
            this.HasSurveillance = hasSurveillance;
            this.IsFree = isFree;
            this.Address = address;
            this.ZipCode = zipCode;
            this.City = city;
            this.IsOffStreet = isOffStreet;
            this.HasElectricSupport = hasElectricSupport;
            this.HasPhysicalReception = hasPhysicalReception;
        }
        
        /// <summary>
        /// Gets or Sets ContractName
        /// </summary>
        [DataMember(Name="contractName", EmitDefaultValue=false)]
        public string ContractName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name="position", EmitDefaultValue=false)]
        public ParkPosition Position { get; set; }

        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [DataMember(Name="accessType", EmitDefaultValue=false)]
        public string AccessType { get; set; }

        /// <summary>
        /// Gets or Sets LockerType
        /// </summary>
        [DataMember(Name="lockerType", EmitDefaultValue=false)]
        public string LockerType { get; set; }

        /// <summary>
        /// Gets or Sets HasSurveillance
        /// </summary>
        [DataMember(Name="hasSurveillance", EmitDefaultValue=false)]
        public bool? HasSurveillance { get; set; }

        /// <summary>
        /// Gets or Sets IsFree
        /// </summary>
        [DataMember(Name="isFree", EmitDefaultValue=false)]
        public bool? IsFree { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name="zipCode", EmitDefaultValue=false)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets IsOffStreet
        /// </summary>
        [DataMember(Name="isOffStreet", EmitDefaultValue=false)]
        public bool? IsOffStreet { get; set; }

        /// <summary>
        /// Gets or Sets HasElectricSupport
        /// </summary>
        [DataMember(Name="hasElectricSupport", EmitDefaultValue=false)]
        public bool? HasElectricSupport { get; set; }

        /// <summary>
        /// Gets or Sets HasPhysicalReception
        /// </summary>
        [DataMember(Name="hasPhysicalReception", EmitDefaultValue=false)]
        public bool? HasPhysicalReception { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Park {\n");
            sb.Append("  ContractName: ").Append(ContractName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  LockerType: ").Append(LockerType).Append("\n");
            sb.Append("  HasSurveillance: ").Append(HasSurveillance).Append("\n");
            sb.Append("  IsFree: ").Append(IsFree).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  IsOffStreet: ").Append(IsOffStreet).Append("\n");
            sb.Append("  HasElectricSupport: ").Append(HasElectricSupport).Append("\n");
            sb.Append("  HasPhysicalReception: ").Append(HasPhysicalReception).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Park);
        }

        /// <summary>
        /// Returns true if Park instances are equal
        /// </summary>
        /// <param name="input">Instance of Park to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Park input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContractName == input.ContractName ||
                    (this.ContractName != null &&
                    this.ContractName.Equals(input.ContractName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.AccessType == input.AccessType ||
                    (this.AccessType != null &&
                    this.AccessType.Equals(input.AccessType))
                ) && 
                (
                    this.LockerType == input.LockerType ||
                    (this.LockerType != null &&
                    this.LockerType.Equals(input.LockerType))
                ) && 
                (
                    this.HasSurveillance == input.HasSurveillance ||
                    (this.HasSurveillance != null &&
                    this.HasSurveillance.Equals(input.HasSurveillance))
                ) && 
                (
                    this.IsFree == input.IsFree ||
                    (this.IsFree != null &&
                    this.IsFree.Equals(input.IsFree))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.IsOffStreet == input.IsOffStreet ||
                    (this.IsOffStreet != null &&
                    this.IsOffStreet.Equals(input.IsOffStreet))
                ) && 
                (
                    this.HasElectricSupport == input.HasElectricSupport ||
                    (this.HasElectricSupport != null &&
                    this.HasElectricSupport.Equals(input.HasElectricSupport))
                ) && 
                (
                    this.HasPhysicalReception == input.HasPhysicalReception ||
                    (this.HasPhysicalReception != null &&
                    this.HasPhysicalReception.Equals(input.HasPhysicalReception))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContractName != null)
                    hashCode = hashCode * 59 + this.ContractName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Position != null)
                    hashCode = hashCode * 59 + this.Position.GetHashCode();
                if (this.AccessType != null)
                    hashCode = hashCode * 59 + this.AccessType.GetHashCode();
                if (this.LockerType != null)
                    hashCode = hashCode * 59 + this.LockerType.GetHashCode();
                if (this.HasSurveillance != null)
                    hashCode = hashCode * 59 + this.HasSurveillance.GetHashCode();
                if (this.IsFree != null)
                    hashCode = hashCode * 59 + this.IsFree.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.IsOffStreet != null)
                    hashCode = hashCode * 59 + this.IsOffStreet.GetHashCode();
                if (this.HasElectricSupport != null)
                    hashCode = hashCode * 59 + this.HasElectricSupport.GetHashCode();
                if (this.HasPhysicalReception != null)
                    hashCode = hashCode * 59 + this.HasPhysicalReception.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
